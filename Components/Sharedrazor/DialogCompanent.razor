@inject IJSRuntime JsRuntime

<dialog id="@DialogId" style=" min-width:300px">
    <div class="d-flex justify-content-between align-items-center">
        <h4> @Title</h4>
        <button class="btn btn-danger btn-sm" @onclick="CloseModalAsync">X</button>
    </div>
    <hr />
    @ChildContent
</dialog>




<style>
    ::backdrop {
        background-color: revert-layer;
    }
</style>
@code {
    [Parameter, EditorRequired]
    public bool Show{get; set;} 

    [Parameter,EditorRequired]
    public string DialogId { get; set; }

    [Parameter, EditorRequired]
    public string Title { get; set; }

    [Parameter,EditorRequired]
    public RenderFragment ChildContent {get; set; }

    [Parameter,EditorRequired]
    public EventCallback OnCloseModal { get; set; }

    private bool _prevShowStatus;

    protected override async Task OnParametersSetAsync()
    {
        if(_prevShowStatus !=Show)
        {
            _prevShowStatus = Show;
            if(Show)
            {
                await OpenModalAsync();
            }
            else
            {
                await  CloseModalAsync();
            }

        }
    }



    private async Task CloseModalAsync() => await JsRuntime.InvokeVoidAsync("window.closeModal", DialogId);
    private async Task OpenModalAsync() => await JsRuntime.InvokeVoidAsync("window.showModal", DialogId);
    private async Task HandeCloseModalClickAsync()
    {
        await CloseModalAsync();
        await OnCloseModal.InvokeAsync();
    }

}
