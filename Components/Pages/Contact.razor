<!-- contact.razor -->
@page "/contact"
@using DangDucThuanFinalYear.Data.Entities
@using DangDucThuanFinalYear.HotelDTO.ContactDTO
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims

@layout InnerLayoutPage
@attribute [StreamRendering]
@inject IContactService ContactService

<Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="PageName">
    Contact
</Microsoft.AspNetCore.Components.Sections.SectionContent>

<div class="container-xxl py-5">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-primary text-uppercase">Contact Us</h6>
            <h1 class="mb-5"><span class="text-primary text-uppercase">Contact</span> For Any Query</h1>
        </div>
        <div class="row g-4">
            <div class="col-12">
                <div class="row gy-4">
                    <div class="col-md-4">
                        <h6 class="section-title text-start text-primary text-uppercase">Booking</h6>
                        <p><i class="fa fa-envelope-open text-primary me-2"></i>thuanddgch200729@gmail.com</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="section-title text-start text-primary text-uppercase">General</h6>
                        <p><i class="fa fa-envelope-open text-primary me-2"></i>dt6993o@gre.ac.uk</p>
                    </div>
                    <div class="col-md-4">
                        <h6 class="section-title text-start text-primary text-uppercase">Technical</h6>
                        <p><i class="fa fa-envelope-open text-primary me-2"></i>dangducthuan@gmail.com</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6 wow fadeIn" data-wow-delay="0.1s">
                <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3724.2217589767088!2d105.78777057471427!3d21.02381108794962!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x313454b329f68977%3A0x6ddf5ff1e829fc56!2zxJDhuqFpIEjhu41jIEdyZWVud2ljaCBWaeG7h3QgTmFt!5e0!3m2!1svi!2s!4v1715049148493!5m2!1svi!2s" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
            </div>
            <div class="col-md-6">
                <div class="wow fadeInUp" data-wow-delay="0.2s">
                    
                    <EditForm Model="@Model" Enhance FormName="contact_form" OnValidSubmit="SendMessageAsync">
                        <DataAnnotationsValidator />
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <InputText @bind-Value="Model.Name" class="form-control" id="name" placeholder="Your Name" />
                                    <label for="name">Your Name</label>
                                </div>
                                <ValidationMessage For="@(() => Model.Name)" class="text-danger" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <InputText @bind-Value="Model.Email" class="form-control" id="email" placeholder="Your Email" />
                                    <label for="email">Your Email</label>
                                </div>
                                <ValidationMessage For="@(() => Model.Email)" class="text-danger" />
                            </div>
                            <div class="col-12">
                                <div class="form-floating">
                                    <InputText @bind-Value="Model.Subject" class="form-control" id="subject" placeholder="Your Subject" />
                                    <label for="subject">Subject</label>
                                </div>
                                <ValidationMessage For="@(() => Model.Subject)" class="text-danger" />
                            </div>
                            <div class="col-12">
                                <div class="form-floating">
                                    <InputTextArea @bind-Value="Model.Message" class="form-control" id="message" placeholder="Your Message"></InputTextArea>
                                    <label for="message">Your Message</label>
                                </div>
                                <ValidationMessage For="@(() => Model.Message)" class="text-danger" />
                            </div>
                            <div class=" col-12">
                                 @if (!string.IsNullOrWhiteSpace(_message))
                                {
                                    <p style="color:green" fm-bold my-3>
                                        @_message
                                    </p>
                                    <hr />
                                }
                                @if (!string.IsNullOrWhiteSpace(_error))
                                {
                                    <p style="color:red" fm-bold my-3>
                                        @_error
                                    </p>
                                    <hr />
                                }
                            </div>


                            <div class="col-12">
                                <button class="btn btn-primary w-100 py-3" type="submit" disabled="@_isProcessing">
                                    @(_isProcessing ? "Send ..." : "Send Message")
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "contact_form")]
    private ContactModelDTO Model { get; set; } = new ContactModelDTO();
    private string _error;
    private string _message;
    private bool _isProcessing;

    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    protected override Task OnInitializedAsync()
    {
        if(HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (HttpContext.User?.Identity?.IsAuthenticated == true)
            {
                Model.Name= HttpContext.User.FindFirstValue(AppConstants.CustomClaimTypes.FullName)!;
                Model.Email = HttpContext.User.FindFirstValue(AppConstants.CustomClaimTypes.Email)!;

            }
        }
        return base.OnInitializedAsync();
    }


    private async Task SendMessageAsync()
    {
        _error = _message = null;
        _isProcessing = true;
        var result = await ContactService.AddContactAsync(Model);
        if (!result.IsSuccess)
        {
            _error = result.ErrorMessage ?? "Error is sending Contact";
        }
        else
        {
            _message = "Contact sent successfully";
        }
        Model = new();

        _isProcessing = false;
    }
}
