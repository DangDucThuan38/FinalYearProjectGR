@page "/staff-admin/manage-room-types/new"
@page "/staff-admin/manage-room-types/{RoomTypeIdRaw:int?}/edit"
@layout AddminStaff


@using DangDucThuanFinalYear.Data.Entities
@using DangDucThuanFinalYear.HotelDTO
@using System.Security.Claims
@using System.IO
@using DangDucThuanFinalYear.HotelDTO.RoomTypeDTO
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IWebHostEnvironment WebHostEnviroment
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateprovider
@inject IRoomTypeService RoomTypeService
@inject IAmenititesService AmenitiesService



<div class="container">
    <div class="d-flex flex-column align-items-center mt-0">
        <h3 style="color: blue;"><strong>@(RoomTypeId.HasValue ? "Update" : "Create")</strong>   Room Type</h3>
        <hr />
    </div>

    <EditForm Model="Model" OnSubmit="SaveRoomTypeAsnyc" FormName="roomTypeForm">
        <DataAnnotationsValidator />

        <div class="row">
            <div class="col-sm-6">
                <div class="mb-3">
                    <label class="form-label">Name:</label>
                    <InputText @bind-Value="Model.Name" class="form-control" placeholder="Room Name" />
                    <ValidationMessage For="() => Model.Name" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Price:</label>
                    <InputNumber @bind-Value="Model.Price" class="form-control" placeholder="Price" />
                    <ValidationMessage For="() => Model.Price" class="text-danger" />
                </div>
            </div>

            <div class="col-sm-6">
                <div class="mb-3">
                    <label class="form-label">Max Adults:</label>
                    <InputNumber @bind-Value="Model.MaxAults" class="form-control" placeholder="Max Adults" />
                    <ValidationMessage For="() => Model.MaxAults" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Max Children:</label>
                    <InputNumber @bind-Value="Model.MaxChildren" class="form-control" placeholder="Max Children" />
                    <ValidationMessage For="() => Model.MaxChildren" class="text-danger" />
                </div>
            </div>

            <div class="col-sm-6">
                <div class="mb-3">
                    <label class="form-label">Description:</label>
                    <textarea @bind="Model.Descripcion" class="form-control resizable" placeholder="Room Description" rows="5"></textarea>
                    <ValidationMessage For="() => Model.Descripcion" class="text-danger" />
                </div>
            </div>

            <div class="col-sm-6">
                @if (!string.IsNullOrWhiteSpace(_imageUrl))
                {
                    <img src="@_imageUrl" class="img-fluid" />
                }
                <div class="mb-3">
                    <label class="form-label">Image:</label>
                    <InputFile OnChange="OnImageSelectAsnyc" class="form-control" />
                </div>
            </div>
        </div>

        <div class="row">
            @foreach (var x in _amenities)
            {
                <div class="col-sm-6 col-md-4 col-lg-3 mb-3">
                    <label class="d-flex align-items-center">
                        <InputCheckbox @bind-Value="x.IsChecked" />
                        <span>@x.Name</span>
                        <InputNumber @bind-Value="@x.Unit" class="form-control col-form-sm" placeholder="Unit Value" />
                    </label>
                </div>
            }
        </div>

        <div class="row">
            <div class="col-sm-6">
                @if (!string.IsNullOrWhiteSpace(_erroMessage))
                {
                    <p class="text-danger">@_erroMessage</p>
                }
                <div class="d-grid">
                    <div class="mx-auto" style="width: 200px;margin-bottom:39px">
                        <button type="submit" class="btn btn-primary" style="width: 100%;">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

<style>
    .resizable {
        resize: both;
        overflow: auto;
    }
</style>


@code {
    [Parameter]
    public int? RoomTypeIdRaw { get; set; }

    private short? RoomTypeId => RoomTypeIdRaw > 0
                        ? (short.TryParse(RoomTypeIdRaw.ToString(), out var roomTypeId) ? roomTypeId : null)
                        : null;
    private RoomTypeCreateUpDateDTO Model{ get; set; } = new();
    private AmenitySelectionReposen[] _amenities = [];
    private string? _erroMessage = null;
    private string? _imageUrl = null;
    private IBrowserFile? _image;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var amenities = await AmenitiesService.GetAmenitiesAsync();
            if (RoomTypeId.HasValue)
            {
                var roomType = await RoomTypeService.GetRoomTypeEditAsync(RoomTypeId.Value);
                if (roomType is null)
                {
                    NavigationManager.NavigateTo("/staff-admin/manage-room-types", replace: true);
                    return;
                }
                Model = roomType;
                _imageUrl = Model.ImageUrl;
            }

            _amenities = amenities.Select(a =>
            {

                var existingAmenity = Model.Amenities.FirstOrDefault(x => x.Id == a.Id);

                return new AmenitySelectionReposen(
              a.Id, a.Name, existingAmenity is not null, existingAmenity?.Unit);
            }).ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in OnInitializedAsync: {ex.Message}");
        }

    }


    private void DeleteImage(string ImageUrl)
    {

        var imagePath = ImageUrl.Replace("/", "\\");
        var fullFilePath = Path.Combine(WebHostEnviroment.WebRootPath, ImageUrl);
        if(File.Exists(fullFilePath))
        {
            try
            {
                File.Delete(fullFilePath);
            }
            catch(Exception ex)
            {

            }
        }
    }

    private async Task SaveRoomTypeAsnyc()
    {
        try
        {
            _erroMessage = null;
            if (Model.Id == 0 && _image is null)
            {
                _erroMessage = "Image is required";
                return;
            }

            Model.Amenities = _amenities.Where(a => a.IsChecked)
                                        .Select(a => new RoomTypeCreateUpDateDTO.RoomTypeAmenityCreateDTO(a.AmenityId, a.Unit))
                                        .ToArray();
            var authState = await AuthStateprovider.GetAuthenticationStateAsync();
            if (authState.User.Identity is null || !authState.User.Identity.IsAuthenticated)
            {
                var lgoinPageURl = NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = NavigationManager.Uri });
                NavigationManager.NavigateTo(lgoinPageURl);
                return;
            }
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;
            try
            {
                string? _existingImageUrl = null;
                if(_image is not null)
                {
                     _existingImageUrl = Model.ImageUrl;
                    var imageUrl = await SaveImageAsync();
                    if (imageUrl is null)
                    {
                        return;
                    }
                    Model.ImageUrl = imageUrl;
                }

        
                var newRoom = await RoomTypeService.CreateRoomAsync(Model, userId);
                if (newRoom.IsSuccess)
                {
                    if (!string.IsNullOrWhiteSpace(_existingImageUrl))
                    {
                        DeleteImage(_existingImageUrl);
                    }
                   
                    NavigationManager.NavigateTo("staff-admin/manage-room-types");
                    return;
                }
                _erroMessage = newRoom.ErrorMessage ?? "Error in saving room";

            }
            catch (Exception ex)
            {
                _erroMessage = ex.Message;
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in SaveRoomAsnyc: {ex.Message}");
        }
    
    }
    private async Task OnImageSelectAsnyc(InputFileChangeEventArgs e)
    {
        using var imageStream = e.File.OpenReadStream();
        using var ms= new MemoryStream();
        await imageStream.CopyToAsync(ms);

        var base64ImageData = Convert.ToBase64String(ms.ToArray());
        var extension = Path.GetExtension(e.File.Name)[1..];
        _imageUrl = $"data:image/{extension};base64,{base64ImageData}";
        _image = e.File;
    }
    private async Task<string?> SaveImageAsync()
    {
        var extension = Path.GetExtension(_image.Name);
        var imageName = $"room-img{Guid.NewGuid()}{extension}";
        var folderPath = Path.Combine(WebHostEnviroment.WebRootPath, "images", "room");
        Directory.CreateDirectory(folderPath);
        var fullFilePath = Path.Combine(folderPath, imageName);
        try
        {
            await using FileStream fs = new FileStream(fullFilePath, FileMode.Create);
            using var imageStream = _image.OpenReadStream();
            await imageStream.CopyToAsync(fs);
            return $"/images/room/{imageName}";
        }catch(Exception ex)
        {
            _erroMessage = $"Error in saving image.{ex.Message}";
            return null;
        }
    }

    private class AmenitySelectionReposen
    {
        public AmenitySelectionReposen(int id, string name, bool isChecked, int? unit) =>
        (AmenityId, Name, IsChecked, Unit) = (id, name, isChecked, unit);

        public int AmenityId { get; set; }
        public string Name { get; set; }
        public bool IsChecked { get; set; }
        public int? Unit { get; set; }
    }
    
}
