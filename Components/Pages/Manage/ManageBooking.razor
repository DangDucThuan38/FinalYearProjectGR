@page "/staff-admin/manage-booking"
@using Microsoft.AspNetCore.Components.QuickGrid

@layout AdminStaffLayout
@inject IMailServices MailsServices

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using DangDucThuanFinalYear.Data.Entities


@inject IBookingServices BookingServices
@inject IRoomTypeService RoomTypeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject IJSRuntime JsRuntime

<style>
    .d-flex {
        display: flex;
    }
    .align-items-center {
        align-items: center;
    }
    .table-responsive {
        overflow-x: auto;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }
    .action-buttons button {
        margin-left: 5px;
        padding: 5px 10px;
        font-size: 12px;
    }

    .date-time-column {
        white-space: nowrap; /* Ngăn ngừa ngắt dòng */
    }

        .date-time-column time {
            display: inline-block;
        }
</style>

<div class="d-flex " style="margin-top: 30px;">

    <p style="background-color: transparent; border: none; margin-top: -6px; cursor: pointer; font-size: 20px; color: #27314A; transition: color 0.3s;"> <i class="fa fa-chevron-right" aria-hidden="true"></i>MANAGE BOOKING ROOM</p>

    </div>
    <hr />
    <div class="table-responsive" style="margin-top:-36px">
    <div class="mb-3 input-group">
        <input type="text" @bind="searchQuery" class="form-control" placeholder="Enter search query" />
        <button class="btn btn-primary" @onclick="SearchAsnyc">Search</button>
    </div>
    <QuickGrid ItemsProvider="_bookingsProviders" @ref="_bookingGrid" Pagination="_paginationState" class="table table-responsive-lg">
            <PropertyColumn Property="b=>b.Id" Title="Booking ID" />
            <PropertyColumn Property="b=>b.RoomTypeName" Title="Room Type" />
            <TemplateColumn Title="Room">
                @if (context.RoomId is null)
                {                    
                    @if (context.IsRoomNumberAssignable)
                    {
                    <button type="button" style="width: 63px;background-color:#12131A" class="btn btn-sm btn-primary" @onclick="()=> OpenAssignRoomModalAsync(context)">Assign</button>
                    }
                    else
                    {
                        <small>Asigned after payment</small>
                    }
                }
                else
                {
                <button type="button" style="width: 63px; background-color:forestgreen" class="btn btn-sm btn-primary" @onclick="()=> OpenAssignRoomModalAsync(context)">@context.RoomNumber</button>
                }
            </TemplateColumn>
            <PropertyColumn Property="b=>b.GuestName" Title="Guest" />
            <PropertyColumn Property="b=>b.BookedOn" Title="Booking Time" Format="hh:mm dd-MM-yyyy " Class="date-time-column" />
            <PropertyColumn Property="b=>b.CheckInDateTime" Title="CheckIn Time" Format="dd-MM-yyyy" />
            <PropertyColumn Property="b=>b.CheckOutDateTime" Title="CheckOut Time" Format="dd-MM-yyyy" />
            <PropertyColumn Property="b=>b.SpecialRequest" Title="Note Request" />
            <PropertyColumn Property="b=>b.BookingStatus" Title="Booking Status" />
            <PropertyColumn Property="b=>b.Remarks" Title="Remarks" />
            <TemplateColumn Class="action-buttons">
            <button type="button" style="width: 63px;" class="btn btn-sm btn-success" disabled="@(!context.CanBeApproved)" @onclick="() => ApproveBookingAsync(context)">Agree</button>
            </TemplateColumn>
            <TemplateColumn>
            @* disabled="@(!context.CanBeCancelled)" *@
            <button type="button" style="width: 63px;" class="btn btn-sm btn-danger"  @onclick="() => CanncelBookingAsync(context)">Cancel</button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="_paginationState" />

@if(_isLoading)
{
    <Loader LoadingText="Fetching bookings" />
}
<DialogCompanent DialogId="assign-room-to-booking" Show="_booking is not null" 
    Title="Assign/Change Room to Booking" OnCloseModal="HandleAssignRoomModalClose">
    <div>
        <select @bind="_slectedRoomId" class="form-control">
            <option value="0">Select Room</option>
            @foreach(var room in _rooms)
            {
                <option value="@room.Id">@room.RoomNumber</option>
            }"
        </select>
        <button type="button" class="btn btn-primary" @onclick="AssignRoomAsync">Assign</button>
    </div>
</DialogCompanent>
<style type="text/css" scoped>
    .test{
        min-width: 190px;
    }

</style>



@code {
    private bool _isLoading;
    private QuickGrid<BookingDisplayModel> _bookingGrid;
    private GridItemsProvider<BookingDisplayModel>? _bookingsProviders;
    private const int PageSize = 5;
    private PaginationState _paginationState = new PaginationState{ItemsPerPage = PageSize};
    private Room[] _rooms = [];
    private int _slectedRoomId;
    private BookingDisplayModel? _booking;
    private string searchQuery  = "";


    protected override void OnInitialized()
    {
        _bookingsProviders = async (GridItemsProviderRequest<BookingDisplayModel> request) =>
        {
            _isLoading = true;
            StateHasChanged();

            //Load Data booking
            var result = await BookingServices.GetBookingAsync(request.StartIndex, request.Count ?? PageSize);


            _isLoading = false;
            StateHasChanged();

            return GridItemsProviderResult.From<BookingDisplayModel>(result.Records, result.TotalCount);
        };
    }

    private async Task SearchAsnyc(MouseEventArgs args)
    {
        _bookingsProviders = async (GridItemsProviderRequest<BookingDisplayModel> request) =>
              {
                  _isLoading = true;
                  StateHasChanged();

                  //Load Data booking
                  var result = await BookingServices.SearchBookingAsync(request.StartIndex, request.Count ?? PageSize, searchQuery);


                  _isLoading = false;
                  StateHasChanged();

                  return GridItemsProviderResult.From<BookingDisplayModel>(result.Records, result.TotalCount);
              };
    }



    private async Task OpenAssignRoomModalAsync(BookingDisplayModel booking)
    {
        var rooms = await RoomTypeService.GetRoomsAllAsync(booking.RoomTypeId);
        if(rooms is null ||rooms.Length == 0)
        {
            await AlertAsync("No rooms available for this room type");
            return;
        }
        if(!rooms.Any(x => x.IsAvaiable))
        {
            await AlertAsync("No rooms available for this room type");
            return;
        }
        _rooms = rooms.ToArray();
        _booking = booking;
    }
    private async Task AlertAsync(string message) =>
    await JsRuntime.InvokeVoidAsync("window.alert", message);

    private void HandleAssignRoomModalClose()
    {
        _booking = null;
        _rooms = [];
        _slectedRoomId = 0;
    }

    private async Task AssignRoomAsync()
    {
        if(_booking is not null  && _slectedRoomId > 0)
        {
            var result = await RoomTypeService.AssignRoomToUserAsync(_booking.Id, _slectedRoomId);
            if(!result.IsSuccess)
            {
                await AlertAsync($"Error in Assigning/changing room ");
                return;
            }
            HandleAssignRoomModalClose();
            await _bookingGrid.RefreshDataAsync();
        }
    }

    private async Task<bool> ComfirmAsync(string mess)=> await JsRuntime.InvokeAsync<bool>("window.confirm", mess);

    private async Task ApproveBookingAsync(BookingDisplayModel booking)
    {
        if(booking.CanBeApproved)
        {
            if(await ComfirmAsync("Are you sure ,you want to approve this booking?"))
            {
                var result = await BookingServices.ApproveBookingAsync(booking.Id);
                var mail = await MailsServices.SendEmailConfirmBooking(booking.Id);

                if(!result.IsSuccess)
                {
                    await AlertAsync(result.ErrorMessage ?? "Error in approving booking");
                }
                else
                {
                    await _bookingGrid.RefreshDataAsync();
                }

            }

        }

    }
    private async Task<string?> GetUser()
    {
        var AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (AuthState.User?.Identity?.IsAuthenticated == true)
        {
            return AuthState.User.GetUserId();
        }
        NavigationManager.NavigateTo("/account/login");
        return null;

    }

    private async Task CanncelBookingAsync(BookingDisplayModel booking)
    {
        if(booking.CanBeCancelled)
        {
            if(await ComfirmAsync("Are you sure ,you want to cancel this booking?"))
            {
                var guestId = await GetUser();
                if (guestId is null)
                {
                    return ;
                }
                var reason = await JsRuntime.InvokeAsync<string?>("window.prompt", "Enter reason for cancellation:");
                if (string.IsNullOrWhiteSpace(reason))
                {
                    await AlertAsync("Reason is required for cancellation");
                    return;
                }

                var result = await BookingServices.CancelBookingAsync(booking.Id, reason, guestId);
                if (!result.IsSuccess)
                {
                    await AlertAsync(result.ErrorMessage ?? "Error in Canncelling booking");
                }
                else
                {
                    await _bookingGrid.RefreshDataAsync();
                }

            }
        }
    }
}
