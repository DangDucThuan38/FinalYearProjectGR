@page "/staff-admin/manage-booking"
@using DangDucThuanFinalYear.Data.Entities
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IBookingServices BookingServices
@inject IRoomTypeService RoomTypeService
@inject IJSRuntime JsRuntime

<div class="container-fluid">
        <div class="d-flex flex-column align-items-center" style="margin-top: 50px">
            <h1 style="color: orange;">Manage Booking</h1>
    </div>
    <hr />
    <div class="table-responsive">
        <QuickGrid ItemsProvider="_bookingsProviders" @ref="_bookingGrid" Pagination="_paginationState" class="table table-striped">
            <PropertyColumn Property="b=>b.Id"/>
            <PropertyColumn Property="b=>b.RoomTypeName"  Title="Room Type"/>
            <TemplateColumn Title="Room Number">
                @if(context.RoomId is null)
                {
                    <label class="d-block">No Room Assigned</label>
                    @if(context.IsRoomNumberAssignable)
                    {
                        <button type="button" class="btn btn-sm btn-primary" @onclick="()=> OpenAssignRoomModalAsync(context)">Assign Room</button>
                    }
                    else
                    {
                        <small>Can be assigned only after payment</small>
                    }
                }
                else
                {
                    <button type="button" class="btn btn-sm btn-primary" @onclick="()=> OpenAssignRoomModalAsync(context)">@context.RoomNumber</button>

                }
            </TemplateColumn>
            <PropertyColumn Property="b=>b.GuestName" Title="Guest"/>
            <PropertyColumn Property="b=>b.BookedOn" Title="Boked On" Format="dd-MMM-yyyy hh:mm:ss" />
            <PropertyColumn Property="b=>b.CheckInDateTime" Title="Check_In" Format="dd-MMM-yyyy"/>
            <PropertyColumn Property="b=>b.CheckOutDateTime" Title="Check_Out" Format="dd-MMM-yyyy" />
            <PropertyColumn Property="b=>b.Adults" />
            <PropertyColumn Property="b=>b.Children" />
            <PropertyColumn Property="b=>b.SpecialRequest" Title="Special Request" />
            <PropertyColumn Property="b=>b.BookingStatus" />
            <PropertyColumn Property="b=>b.Remarks" />
                <TemplateColumn>
                    <button type="button" class="btn btn-sm btn-success" disabled="@(!context.CanBeApproved)">Approve</button>
                    <button type="button" class="btn btn-sm btn-danger" disabled ="@(!context.CanBeCancelled)">Cancel</button>

                </TemplateColumn>


        </QuickGrid>
    </div>
    <Paginator State="_paginationState"/>

</div>
@if(_isLoading)
{
    <Loader LoadingText="Fetching bookings" />
}
<DialogCompanent DialogId="assign-room-to-booking" Show="_booking is not null" 
    Title="Assign/Change Room to Booking" OnCloseModal="HandleAssignRoomModalClose">
    <div>
        <select @bind="_slectedRoomId" class="form-control">
            <option value="0">Select Room</option>
            @foreach(var room in _rooms)
            {
                <option value="@room.Id">@room.RoomNumber</option>
            }"
        </select>
        <button type="button" class="btn btn-primary" @onclick="AssignRoomAsync">Assign</button>
    </div>
</DialogCompanent>


@code {
    private bool _isLoading;
    private QuickGrid<BookingDisplayModel> _bookingGrid;
    private GridItemsProvider<BookingDisplayModel>? _bookingsProviders;
    private const int PageSize = 10;
    private PaginationState _paginationState = new PaginationState{ItemsPerPage = PageSize};
    private Room[] _rooms = [];
    private int _slectedRoomId;
    private BookingDisplayModel? _booking;


    protected override void OnInitialized()
    {
        _bookingsProviders = async (GridItemsProviderRequest<BookingDisplayModel> request) =>
        {
            _isLoading = true;
            StateHasChanged();

            //Load Data booking
            var result = await BookingServices.GetBookingAsync(request.StartIndex, request.Count ?? PageSize);


            _isLoading = false;
            StateHasChanged();

            return GridItemsProviderResult.From<BookingDisplayModel>(result.Records, result.TotalCount);
        };
    }

    private async Task OpenAssignRoomModalAsync(BookingDisplayModel booking)
    {
        var rooms = await RoomTypeService.GetRoomsAllAsync(booking.RoomTypeId);
        if(rooms is null ||rooms.Length == 0)
        {
            await AlertAsync("No rooms available for this room type");
            return;
        }
        if(!rooms.Any(x => x.IsAvaiable))
        {
            await AlertAsync("No rooms available for this room type");
            return;
        }
        _rooms = rooms.Where(x=> x.IsAvaiable == true).ToArray();
        _booking = booking;


    }
    private async Task AlertAsync(string message) =>
    await JsRuntime.InvokeVoidAsync("window.alert", message);

    private void HandleAssignRoomModalClose()
    {
        _booking = null;
        _rooms = [];
        _slectedRoomId = 0;
    }

    private async Task AssignRoomAsync()
    {
        if(_booking is not null  && _slectedRoomId > 0)
        {
            var result = await RoomTypeService.AssignRoomToUserAsync(_booking.Id, _slectedRoomId);
            if(!result.IsSuccess)
            {
                await AlertAsync($"Error in Assigning/changing room ");
                return;
            }
             HandleAssignRoomModalClose();
             await _bookingGrid.RefreshDataAsync();
        }
    }


}
