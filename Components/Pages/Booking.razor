@page "/booking"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using DangDucThuanFinalYear.Components.Account
@using DangDucThuanFinalYear.HotelDTO;
@using DangDucThuanFinalYear.HotelDTO.ShowRoomPublicDTO

@layout InnerLayoutPage
@inject AuthenticationStateProvider AuthStateProvider
@inject IRoomServices RoomsService
@inject IUserService UsersService
@inject IBookingServices BookingServices
@inject IMailServices MailsServices
@inject IPaymentServices PaymentsServices
@inject IJSRuntime JSRuntime
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject IRoomTypeService RoomsTypeService



<Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="PageName">
    Booking Now
</Microsoft.AspNetCore.Components.Sections.SectionContent>


<div class="container-xxl py-5">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-primary text-uppercase">Room Booking</h6>
            <h1 class="mb-5">Book A <span class="text-primary text-uppercase">Luxury Room</span></h1>
        </div>
        <div class="row g-5">
            <div class="col-lg-6">
                <div class="row g-3">
                    <div class="col-6 text-end">
                        <img class="img-fluid rounded w-75 wow zoomIn" data-wow-delay="0.1s" src="img/about-1.jpg" style="margin-top: 25%;">
                    </div>
                    <div class="col-6 text-start">
                        <img class="img-fluid rounded w-100 wow zoomIn" data-wow-delay="0.3s" src="img/about-2.jpg">
                    </div>
                    <div class="col-6 text-end">
                        <img class="img-fluid rounded w-50 wow zoomIn" data-wow-delay="0.5s" src="img/about-3.jpg">
                    </div>
                    <div class="col-6 text-start">
                        <img class="img-fluid rounded w-75 wow zoomIn" data-wow-delay="0.7s" src="img/about-4.jpg">
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="wow fadeInUp" data-wow-delay="0.2s">
                    <form>
                        <EditForm Model="_model" OnValidSubmit="BookRoomAsnyc">
                            <DataAnnotationsValidator/>
                            <div class="row g-3">
                                
                                @if (!_isAuthenticated)
                                {
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText @bind-Value="_model.FirstName" class="form-control" id="name" placeholder="Frist Name" />
                                            <label for="name">First Name</label>
                                        </div>
                                        <ValidationMessage For="()=>_model.FirstName" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText @bind-Value="_model.LastName" class="form-control" id="last-name" placeholder="Last Name" />
                                            <label for="name">Last Name</label>
                                        </div>
                                        <ValidationMessage For="()=>_model.LastName" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText @bind-Value="_model.Email" class="form-control" id="email" placeholder="Email" />
                                            <label for="name">Your Email</label>
                                        </div>
                                        <ValidationMessage For="()=>_model.Email" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText @bind-Value="_model.ContactNumber" class="form-control" id="contact-number" placeholder="Contact Number" />
                                            <label for="name">Contact Number</label>
                                        </div>
                                        <ValidationMessage For="()=>_model.ContactNumber" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText type="password" @bind-Value="_model.Password" class="form-control" id="password" placeholder="Password" />
                                            <label for="name">Password</label>
                                        </div>
                                        <ValidationMessage For="()=>_model.Password" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <InputText type="password" @bind-Value="_model.ConfirmPassword" class="form-control" id="confirm-password" placeholder="Confirm Password" />
                                            <label for="name">Confirm Password</label>
                                        </div>
                                        <ValidationMessage For="()=>_model.ConfirmPassword" class="text-danger" />
                                    </div>
                                }

                                <div class="col-md-6">
                                    <div class="form-floating date" id="date3" data-target-input="nearest">
                                        <InputDate @bind-Value="_model.CheckInDate" onchange="" Format="dd/MM/yyyy" class="form-control datetimepicker-input" id="checkin" placeholder="Check In" data-target="#date3" data-toggle="datetimepicker" />
                                      
                                        <label for="checkin">Check In</label>
                                    </div>
                                    <ValidationMessage For="()=>_model.CheckInDate" class="text-danger" />

                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating date" id="date4" data-target-input="nearest">
                                        <InputDate @bind-Value="_model.CheckOutDate" Format="dd/MM/yyyy" class="form-control datetimepicker-input" id="checkout" placeholder="Check Out" data-target="#date4" data-toggle="datetimepicker" @onchange="(e) => HandleCheckOutDateChange(e)"/>
                                        <label for="checkout">Check Out</label>
                                    </div>
                                    <ValidationMessage For="()=>_model.CheckOutDate" class="text-danger" />

                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputSelect 
                                            ValueExpression="() => _model.Audlts"
                                            ValueChanged="(int? newAdults)=> HandleAdultsChange(newAdults)"
                                            class="form-select" 
                                            id="select1">
                                            @for (int i = 1; i <= 6; i++)
                                            {
                                                <option value="@i">@i Adult(s)</option>
                                            }
                                        </InputSelect>
                                        <label for="select1">Select Adult</label>
                                    </div>
                                    <ValidationMessage For="()=>_model.Audlts" class="text-danger" />

                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputSelect 
                                         ValueExpression="() => _model.Children"
                                         ValueChanged="(int? newChildrens)=> HandleChildrenChange(newChildrens)"
                                        class="form-select" 
                                        id="select2">
                                            @for (int i = 1; i <= 6; i++)
                                            {
                                                <option value="@i">@i @(i > 1 ? "Children" : "Child")</option>
                                            }
                                        </InputSelect>
                                        <label for="select2">Select Child</label>
                                    </div>
                                    <ValidationMessage For="()=>_model.Children" class="text-danger" />

                                </div>
                                <div class="col-12">
                                    <div class="form-floating">
                                        <InputSelect 
                                            Value="@_model.RoomTypeId"
                                            ValueExpression="() => _model.RoomTypeId"
                                            ValueChanged="(short id)=> HandleRoomTypeChange(id, _model)"
                                            class="form-select" 
                                            id="select3"
                                            >
                                            <option value="0">Select Room Type</option>
                                            @foreach (var roomType in _roomTypes)
                                            {
                                                NameRooom = roomType.name;
                                                <option value="@roomType.Id">
                                                    @roomType.name - @roomType.AdditionalData.ToString("#,##0") VNĐ/Night
                                                </option>


                                            }
                                        </InputSelect>
                                        <label for="select3">Select A Room</label>
                                    </div>
                                </div>

                                <div class="col-12">
                                    <div class="form-floating">
                                        <InputTextArea @bind-Value="_model.SpecialRequest" class="form-control" placeholder="Special Request" id="message" style="height: 100px">
                                        </InputTextArea>
                                        <label for="message">Special Request</label>
                                    </div>
                                    <ValidationMessage For="()=>_model.SpecialRequest" class="text-danger" />

                                </div>
                                <div class="col-12">
                                    <p>
                                        <strong> Total Amount:@TotalAmout.ToString("#,##0") VNĐ</strong>
                                    </p>
                                </div>
                                <div class="col-12">
                                    <p>
                                        @if (RoomIsValiable == 0)
                                        {
                                            <strong style="color:red">The room you selected is currently sold out. Please choose a living room!</strong>

                                        }else
                                        {
                                            <strong> Room Avaliable:@RoomIsValiable Rooms</strong>
                                        }
                                   </p>
                                </div>

                                <div class="col-12">
                                     @if(_roomIsValiable == 0)
                                    {
                                        <button class="btn btn-primary w-100 py-3" disabled= "true" type="submit">Book Now</button>
                                    }else
                                    {
                                       <button class="btn btn-primary w-100 py-3" type="submit">Book Now</button>
                                    }
                                </div>
                            </div>
                        </EditForm>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery(Name = "room-type")]
    public string? SelectedRoomType { get; set; } 
    private BookingModel _model = new();
    private bool _isAuthenticated;
    private string? _userId;
    private LookupModel<short,decimal>[] _roomTypes = [];
    private string? _erromessage;
    private decimal _price = 0;
    private int _roomIsValiable = 0;
    private string NameRooom { get; set; }

    private decimal TotalAmout => (_model.CheckOutDate.DayNumber - _model.CheckInDate.DayNumber) * _price;
    private int RoomIsValiable => _roomIsValiable;

    protected override async Task OnInitializedAsync()
    {
        var authSate = await AuthStateProvider.GetAuthenticationStateAsync();
        var roomTypeTask = RoomsService.GetRoomTypeLookupAsnyc();
        if(authSate.User.Identity?.IsAuthenticated==true)
        {
            // user is logged in
            // fetch use deatails from AuthState claims
            _isAuthenticated = true;
            _userId = authSate.User.GetUserId();

            _model.SetDummyValues();

        }
        _roomTypes = await roomTypeTask;


        if (!string.IsNullOrWhiteSpace(SelectedRoomType) 
                    && short.TryParse(SelectedRoomType, out short _roomTypeId )
                    && _roomTypeId >0)
        {
            HandleRoomTypeChange(_roomTypeId,_model);
            StateHasChanged();
            // Khi HandleRoomTypeChange thực hiện update dữ liệu để hiển thị
        }
    }
    private async Task HandleAdultsChange(int? newAdults)
    {
        _model.Audlts = newAdults;
        _filterModel.Audlts = _model.Audlts;
        await FilterRoomTypes();
        StateHasChanged();
    }
    private async Task HandleChildrenChange(int? newChildrens)
    {
        _model.Children = newChildrens;
        _filterModel.Children = _model.Children;
        await FilterRoomTypes();
        StateHasChanged();
    }
    private async Task HandleRoomTypeChange(short newRoomTypeId, BookingModel model)
    {
        _model.RoomTypeId = newRoomTypeId;
        var roomType = _roomTypes.FirstOrDefault(rt => rt.Id == newRoomTypeId);
        var room = await CheckRoomValiad(model);
        if(room > 0)
            _roomIsValiable = room;
        else
            _roomIsValiable = 0;
        _price = roomType.AdditionalData;
        StateHasChanged();
    }
    private async Task<int> CheckRoomValiad(BookingModel model)
    {
        var room = await BookingServices.CheckAvailableRoomBooking(model);
        if (room <= 0)
        {
            _erromessage = "No rooms available for this room type";
            return 0;
        }
        else
            return room;
    }




    private FilterModel? _filterModel = new();
    private async Task FilterRoomTypes()
    {

        _roomTypes = await RoomsService.GetRoomTypeLookupAsnyc(_filterModel);
    }

    private async Task BookRoomAsnyc()
    {

        NameRooom = await RoomsTypeService.GetRoomTypeName(_model.RoomTypeId);

        var confirmationUrl = $"/bookingconfirmation?NameRoomType={NameRooom}&firstname={_model.FirstName}&lastname={_model.LastName}&email={_model.Email}&contactnumber={_model.ContactNumber}&password={_model.Password}&comfirmpassword={_model.ConfirmPassword}&checkin={_model.CheckInDate}&checkout={_model.CheckOutDate}&roomtype={_model.RoomTypeId}&Audlts={_model.Audlts}&children={_model.Children}&TotalAmout={TotalAmout}&specialRequest={_model.SpecialRequest}&amount={_model.Amount}";
        NavigationManager.NavigateTo(confirmationUrl, true);

    }

    private async Task HandleCheckOutDateChange(ChangeEventArgs e)
    {
        var room = await CheckRoomValiad(_model);
        if (room > 0)
            _roomIsValiable = room;
        else
            _roomIsValiable = 0;
        StateHasChanged();

    }
}
