@page "/change-password"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserServices
@attribute [StreamRendering]
<div class="container">
    <div class="d-flex  flex-column  align-items-center" style="margin-top: 50px">

        <p style="background-color: transparent; border: none; margin-top: -6px; cursor: pointer; font-size: 20px; color: #27314A; transition: color 0.3s;">
           CHANGE PASSWORD
        </p>
        <div class="row d-flex justify-content-center" style="margin-bottom:20px">
            <div class="col-sm-15">
                @if (!string.IsNullOrWhiteSpace(_message))
                {
                    <p class="bg-success">
                        @_message
                    </p>
                    <hr />
                }
                @if (!string.IsNullOrWhiteSpace(_error))
                {
                    <p class="bg-success">
                        @_error
                    </p>
                    <hr />
                }
                @if (_userId is not null)
                {
                   <EditForm Model="Model" Enhance FormName="change-password" OnInvalidSubmit="ChangePasswordAsync">
                       <DataAnnotationsValidator/>
                       <div class="mb-3">
                           <label class="form-label">Current Password</label>
                           <InputText type="password" @bind-Value="Model.CurrentPasswords" class="form-control" placeholder="Enter current password"/>
                           <ValidationMessage For="()=> Model.CurrentPasswords" class="text-danger"/>
                       </div>
                         <div class="mb-3">
                             <label class="form-label">New Password</label>
                             <InputText type="password" @bind-Value="Model.NewPassword" class="form-control" placeholder="Enter new password" />
                             <ValidationMessage For="()=> Model.NewPassword" class="text-danger" />
                         </div>
                         <div class="mb-3">
                             <label class="form-label">Comfirm new Password</label>
                             <InputText type="password" @bind-Value="Model.ConfirmnewPassword" class="form-control" placeholder="Comfirm new password" />
                             <ValidationMessage For="()=> Model.ConfirmnewPassword" class="text-danger" />
                         </div>
                         <div class="mb-3">
                             <button type="submit" class="btn btn-primary btn-sm">Change Password</button>
                         </div>
                   </EditForm>
                }


            </div>

        </div>

    </div>
</div>

@code {
    private string? _error;

    private string? _message;
    private string? _userId;
    [SupplyParameterFromForm]
    public ChangePasswordDTO Model { get; set; } = new();
    [CascadingParameter]
    public HttpContext httpContext { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState is null || authState.User.Identity is null
            || !authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        _userId = authState.User.GetUserId()!;
    }

    private async Task ChangePasswordAsync()
    {
        _message = _error = null;
        var userId = httpContext.User.GetUserId();
        var result = await UserServices.ChangePasswordAsnyc(Model, userId);
        if(!result.IsSuccess)
        {
            _error = result.ErrorMessage;
        }

    }






}

